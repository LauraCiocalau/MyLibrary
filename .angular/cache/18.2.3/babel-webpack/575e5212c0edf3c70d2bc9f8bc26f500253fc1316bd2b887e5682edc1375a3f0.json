{"ast":null,"code":"import { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, EventEmitter, booleanAttribute, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { map, filter, debounceTime } from 'rxjs/operators';\n\n// Angular may add, remove, or edit comment nodes during change detection. We don't care about\n// these changes because they don't affect the user-preceived content, and worse it can cause\n// infinite change detection cycles where the change detection updates a comment, triggering the\n// MutationObserver, triggering another change detection and kicking the cycle off again.\nfunction shouldIgnoreRecord(record) {\n  // Ignore changes to comment text.\n  if (record.type === 'characterData' && record.target instanceof Comment) {\n    return true;\n  }\n  // Ignore addition / removal of comments.\n  if (record.type === 'childList') {\n    for (let i = 0; i < record.addedNodes.length; i++) {\n      if (!(record.addedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    for (let i = 0; i < record.removedNodes.length; i++) {\n      if (!(record.removedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // Observe everything else.\n  return false;\n}\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nlet MutationObserverFactory = /*#__PURE__*/(() => {\n  class MutationObserverFactory {\n    create(callback) {\n      return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n    static #_ = this.ɵfac = function MutationObserverFactory_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MutationObserverFactory)();\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MutationObserverFactory,\n      factory: MutationObserverFactory.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MutationObserverFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** An injectable service that allows watching elements for changes to their content. */\nlet ContentObserver = /*#__PURE__*/(() => {\n  class ContentObserver {\n    constructor(_mutationObserverFactory) {\n      this._mutationObserverFactory = _mutationObserverFactory;\n      /** Keeps track of the existing MutationObservers so they can be reused. */\n      this._observedElements = new Map();\n      this._ngZone = inject(NgZone);\n    }\n    ngOnDestroy() {\n      this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n      const element = coerceElement(elementOrRef);\n      return new Observable(observer => {\n        const stream = this._observeElement(element);\n        const subscription = stream.pipe(map(records => records.filter(record => !shouldIgnoreRecord(record))), filter(records => !!records.length)).subscribe(records => {\n          this._ngZone.run(() => {\n            observer.next(records);\n          });\n        });\n        return () => {\n          subscription.unsubscribe();\n          this._unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n      return this._ngZone.runOutsideAngular(() => {\n        if (!this._observedElements.has(element)) {\n          const stream = new Subject();\n          const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n          if (observer) {\n            observer.observe(element, {\n              characterData: true,\n              childList: true,\n              subtree: true\n            });\n          }\n          this._observedElements.set(element, {\n            observer,\n            stream,\n            count: 1\n          });\n        } else {\n          this._observedElements.get(element).count++;\n        }\n        return this._observedElements.get(element).stream;\n      });\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n      if (this._observedElements.has(element)) {\n        this._observedElements.get(element).count--;\n        if (!this._observedElements.get(element).count) {\n          this._cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n      if (this._observedElements.has(element)) {\n        const {\n          observer,\n          stream\n        } = this._observedElements.get(element);\n        if (observer) {\n          observer.disconnect();\n        }\n        stream.complete();\n        this._observedElements.delete(element);\n      }\n    }\n    static #_ = this.ɵfac = function ContentObserver_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContentObserver)(i0.ɵɵinject(MutationObserverFactory));\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ContentObserver,\n      factory: ContentObserver.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContentObserver;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nlet CdkObserveContent = /*#__PURE__*/(() => {\n  class CdkObserveContent {\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n      return this._debounce;\n    }\n    set debounce(value) {\n      this._debounce = coerceNumberProperty(value);\n      this._subscribe();\n    }\n    constructor(_contentObserver, _elementRef) {\n      this._contentObserver = _contentObserver;\n      this._elementRef = _elementRef;\n      /** Event emitted for each change in the element's content. */\n      this.event = new EventEmitter();\n      this._disabled = false;\n      this._currentSubscription = null;\n    }\n    ngAfterContentInit() {\n      if (!this._currentSubscription && !this.disabled) {\n        this._subscribe();\n      }\n    }\n    ngOnDestroy() {\n      this._unsubscribe();\n    }\n    _subscribe() {\n      this._unsubscribe();\n      const stream = this._contentObserver.observe(this._elementRef);\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    }\n    _unsubscribe() {\n      this._currentSubscription?.unsubscribe();\n    }\n    static #_ = this.ɵfac = function CdkObserveContent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkObserveContent)(i0.ɵɵdirectiveInject(ContentObserver), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkObserveContent,\n      selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n      inputs: {\n        disabled: [2, \"cdkObserveContentDisabled\", \"disabled\", booleanAttribute],\n        debounce: \"debounce\"\n      },\n      outputs: {\n        event: \"cdkObserveContent\"\n      },\n      exportAs: [\"cdkObserveContent\"],\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n  return CdkObserveContent;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ObserversModule = /*#__PURE__*/(() => {\n  class ObserversModule {\n    static #_ = this.ɵfac = function ObserversModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ObserversModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ObserversModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MutationObserverFactory]\n    });\n  }\n  return ObserversModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };","map":{"version":3,"names":["coerceElement","coerceNumberProperty","i0","Injectable","inject","NgZone","EventEmitter","booleanAttribute","Directive","Output","Input","NgModule","Observable","Subject","map","filter","debounceTime","shouldIgnoreRecord","record","type","target","Comment","i","addedNodes","length","removedNodes","MutationObserverFactory","create","callback","MutationObserver","_","ɵfac","MutationObserverFactory_Factory","__ngFactoryType__","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","_ngZone","ngOnDestroy","forEach","element","_cleanupObserver","observe","elementOrRef","observer","stream","_observeElement","subscription","pipe","records","subscribe","run","next","unsubscribe","_unobserveElement","runOutsideAngular","has","mutations","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","CdkObserveContent","disabled","_disabled","value","_unsubscribe","_subscribe","debounce","_debounce","_contentObserver","_elementRef","event","_currentSubscription","ngAfterContentInit","CdkObserveContent_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","standalone","features","ɵɵInputTransformsFeature","ObserversModule","ObserversModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","providers"],"sources":["C:/Users/laura/Desktop/ProjectAngular.Net/MyLibrary/UI/library.web/node_modules/@angular/cdk/fesm2022/observers.mjs"],"sourcesContent":["import { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, EventEmitter, booleanAttribute, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { map, filter, debounceTime } from 'rxjs/operators';\n\n// Angular may add, remove, or edit comment nodes during change detection. We don't care about\n// these changes because they don't affect the user-preceived content, and worse it can cause\n// infinite change detection cycles where the change detection updates a comment, triggering the\n// MutationObserver, triggering another change detection and kicking the cycle off again.\nfunction shouldIgnoreRecord(record) {\n    // Ignore changes to comment text.\n    if (record.type === 'characterData' && record.target instanceof Comment) {\n        return true;\n    }\n    // Ignore addition / removal of comments.\n    if (record.type === 'childList') {\n        for (let i = 0; i < record.addedNodes.length; i++) {\n            if (!(record.addedNodes[i] instanceof Comment)) {\n                return false;\n            }\n        }\n        for (let i = 0; i < record.removedNodes.length; i++) {\n            if (!(record.removedNodes[i] instanceof Comment)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Observe everything else.\n    return false;\n}\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MutationObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MutationObserverFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MutationObserverFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /** Keeps track of the existing MutationObservers so they can be reused. */\n        this._observedElements = new Map();\n        this._ngZone = inject(NgZone);\n    }\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this._observeElement(element);\n            const subscription = stream\n                .pipe(map(records => records.filter(record => !shouldIgnoreRecord(record))), filter(records => !!records.length))\n                .subscribe(records => {\n                this._ngZone.run(() => {\n                    observer.next(records);\n                });\n            });\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n        return this._ngZone.runOutsideAngular(() => {\n            if (!this._observedElements.has(element)) {\n                const stream = new Subject();\n                const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n                if (observer) {\n                    observer.observe(element, {\n                        characterData: true,\n                        childList: true,\n                        subtree: true,\n                    });\n                }\n                this._observedElements.set(element, { observer, stream, count: 1 });\n            }\n            else {\n                this._observedElements.get(element).count++;\n            }\n            return this._observedElements.get(element).stream;\n        });\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            this._observedElements.get(element).count--;\n            if (!this._observedElements.get(element).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = this._observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ContentObserver, deps: [{ token: MutationObserverFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ContentObserver, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ContentObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: MutationObserverFactory }] });\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n        return this._debounce;\n    }\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    constructor(_contentObserver, _elementRef) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        /** Event emitted for each change in the element's content. */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    _subscribe() {\n        this._unsubscribe();\n        const stream = this._contentObserver.observe(this._elementRef);\n        this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    }\n    _unsubscribe() {\n        this._currentSubscription?.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkObserveContent, deps: [{ token: ContentObserver }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkObserveContent, isStandalone: true, selector: \"[cdkObserveContent]\", inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\", booleanAttribute], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkObserveContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: ContentObserver }, { type: i0.ElementRef }], propDecorators: { event: [{\n                type: Output,\n                args: ['cdkObserveContent']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkObserveContentDisabled', transform: booleanAttribute }]\n            }], debounce: [{\n                type: Input\n            }] } });\nclass ObserversModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ObserversModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ObserversModule, imports: [CdkObserveContent], exports: [CdkObserveContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ObserversModule, providers: [MutationObserverFactory] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ObserversModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkObserveContent],\n                    exports: [CdkObserveContent],\n                    providers: [MutationObserverFactory],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}