{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HomeService = /*#__PURE__*/(() => {\n  class HomeService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl + '/Library';\n    }\n    getToken() {\n      return localStorage.getItem('token') || sessionStorage.getItem('token');\n    }\n    getBooks() {\n      const token = this.getToken();\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.get(this.apiUrl, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    addBook(bookData) {\n      const token = this.getToken();\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      return this.http.post(this.apiUrl, bookData, {\n        headers,\n        reportProgress: true,\n        observe: 'events'\n      }).pipe(catchError(error => {\n        console.error('Error adding book:', error);\n        return throwError(() => new Error('Failed to add book'));\n      }));\n    }\n    deleteBook(id) {\n      const token = this.getToken();\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      return this.http.delete(`${this.apiUrl}/${id}`, {\n        headers\n      }).pipe(catchError(error => {\n        console.error('Error deleting book:', error);\n        return throwError(() => new Error('Failed to delete book'));\n      }));\n    }\n    handleError(error) {\n      let errorMessage = 'An error occurred while processing your request.';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        errorMessage = `Error ${error.status}: ${error.message}`;\n      }\n      console.error('API call error:', error);\n      return throwError(() => new Error(errorMessage));\n    }\n    getBookById(bookId) {\n      const token = localStorage.getItem('token') || sessionStorage.getItem('token'); // Verifică tokenul\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Adaugă tokenul în antet\n      });\n      return this.http.get(`${this.apiUrl}/books/${bookId}`, {\n        headers\n      }).pipe(catchError(error => {\n        console.error('Error fetching book:', error);\n        return throwError(() => new Error('Failed to fetch book details'));\n      }));\n    }\n    updateBook(bookId, formData) {\n      const token = this.getToken();\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.put(`${this.apiUrl}/books/${bookId}`, formData, {\n        headers: headers,\n        observe: 'events'\n      }).pipe(catchError(error => {\n        console.error('Error updating book:', error);\n        return throwError(() => new Error('Failed to update book'));\n      }));\n    }\n    searchBooks(title, author, year, category) {\n      let params = new HttpParams();\n      if (title) params = params.append('title', title);\n      if (author) params = params.append('author', author);\n      if (year) params = params.append('year', year);\n      if (category) params = params.append('category', category);\n      return this.http.get(`${this.apiUrl}/search`, {\n        params\n      });\n    }\n    static #_ = this.ɵfac = function HomeService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HomeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HomeService,\n      factory: HomeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return HomeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}