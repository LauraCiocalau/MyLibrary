{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n    getToken() {\n      return localStorage.getItem('token') || sessionStorage.getItem('token');\n    }\n    getUserId() {\n      return this.http.get(`${this.baseUrl}/User/GetUserId`, {\n        headers: this.getAuthHeaders()\n      }); // Ensure headers are used\n    }\n    getUserDetails() {\n      return this.http.get(`${this.baseUrl}/User/details`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // User login\n    onLogin(request) {\n      return this.http.post(`${this.baseUrl}/Account/login`, request, {\n        headers: this.headers\n      }).pipe(tap(response => {\n        if (response.token) {\n          const storage = request.rememberMe ? localStorage : sessionStorage;\n          storage.setItem('token', response.token); // Store token based on rememberMe\n        }\n      }), catchError(this.handleError));\n    }\n    // User registration\n    register(request) {\n      return this.http.post(`${this.baseUrl}/Account/register`, request, {\n        headers: this.headers\n      }).pipe(tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token); // Store token\n        }\n      }), catchError(this.handleError));\n    }\n    // Fetching user's books\n    getMyBooks() {\n      return this.http.get(`${this.baseUrl}/Account/MyBooks`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // Validating token\n    validateToken(token) {\n      const body = {\n        token\n      };\n      return this.http.post(`${this.baseUrl}/Account/validate-token`, body, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // Password reset\n    forgotPassword(email) {\n      return this.http.post(`${this.baseUrl}/ResetPassword/forgot-password`, {\n        email\n      }, {\n        headers: this.headers\n      }).pipe(catchError(this.handleError));\n    }\n    // Deleting user account\n    deleteUser() {\n      return this.http.delete(`${this.baseUrl}/User/delete`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // Error handling\n    handleError(error) {\n      let errorMessage = 'Something went wrong; please try again later.';\n      if (error.error instanceof ErrorEvent) {\n        console.error('A client-side error occurred:', error.error.message);\n      } else {\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n        switch (error.status) {\n          case 400:\n            errorMessage = 'Bad Request: Please check your input.';\n            break;\n          case 401:\n            errorMessage = 'Unauthorized: Invalid credentials or session expired.';\n            this.clearToken(); // Clear token on 401\n            break;\n          case 500:\n            errorMessage = 'Server error: Please try again later.';\n            break;\n          default:\n            errorMessage = `Unexpected error: ${error.message}`;\n            break;\n        }\n      }\n      return throwError(() => new Error(errorMessage));\n    }\n    // Clear token\n    clearToken() {\n      localStorage.removeItem('token');\n      sessionStorage.removeItem('token');\n      // Optionally redirect to login page\n    }\n    // Get authorization headers\n    getAuthHeaders() {\n      const token = this.getToken();\n      return this.headers.set('Authorization', token ? `Bearer ${token}` : '');\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}