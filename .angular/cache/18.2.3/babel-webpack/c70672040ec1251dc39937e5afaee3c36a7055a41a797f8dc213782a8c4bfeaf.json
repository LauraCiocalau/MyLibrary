{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n    getToken() {\n      return localStorage.getItem('token') || sessionStorage.getItem('token');\n    }\n    getUserId() {\n      return this.http.get(`${this.baseUrl}/User/GetUserId`, {\n        headers: this.getAuthHeaders()\n      }); // Ensure headers are used\n    }\n    getUserDetails() {\n      return this.http.get(`${this.baseUrl}/User/details`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // User login\n    onLogin(request) {\n      return this.http.post(`${this.baseUrl}/Account/login`, request, {\n        headers: this.headers\n      }).pipe(tap(response => {\n        if (response.token) {\n          const storage = request.rememberMe ? localStorage : sessionStorage;\n          storage.setItem('token', response.token); // Store token based on rememberMe\n        }\n      }), catchError(this.handleError));\n    }\n    // User registration\n    register(request) {\n      return this.http.post(`${this.baseUrl}/Account/register`, request, {\n        headers: this.headers\n      }).pipe(tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token); // Store token\n        }\n      }), catchError(this.handleError));\n    }\n    // Fetching user's books\n    getMyBooks() {\n      return this.http.get(`${this.baseUrl}/Account/MyBooks`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // Validating token\n    validateToken(token) {\n      const body = {\n        token\n      };\n      return this.http.post(`${this.baseUrl}/Account/validate-token`, body, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // Password reset\n    forgotPassword(email) {\n      return this.http.post(`${this.baseUrl}/ResetPassword/forgot-password`, {\n        email\n      }, {\n        headers: this.headers\n      }).pipe(catchError(this.handleError));\n    }\n    // Deleting user account\n    deleteUser() {\n      return this.http.delete(`${this.baseUrl}/User/delete`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // Error handling\n    handleError(error) {\n      let errorMessage = 'Something went wrong; please try again later.';\n      if (error.error instanceof ErrorEvent) {\n        console.error('A client-side error occurred:', error.error.message);\n      } else {\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n        switch (error.status) {\n          case 400:\n            errorMessage = 'Bad Request: Please check your input.';\n            break;\n          case 401:\n            errorMessage = 'Unauthorized: Invalid credentials or session expired.';\n            this.clearToken(); // Clear token on 401\n            break;\n          case 500:\n            errorMessage = 'Server error: Please try again later.';\n            break;\n          default:\n            errorMessage = `Unexpected error: ${error.message}`;\n            break;\n        }\n      }\n      return throwError(() => new Error(errorMessage));\n    }\n    // Clear token\n    clearToken() {\n      localStorage.removeItem('token');\n      sessionStorage.removeItem('token');\n      // Optionally redirect to login page\n    }\n    // Get authorization headers\n    getAuthHeaders() {\n      const token = this.getToken();\n      return this.headers.set('Authorization', token ? `Bearer ${token}` : '');\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["HttpClient","HttpHeaders","throwError","catchError","tap","environment","AuthService","constructor","http","baseUrl","apiUrl","headers","getToken","localStorage","getItem","sessionStorage","getUserId","get","getAuthHeaders","getUserDetails","pipe","handleError","onLogin","request","post","response","token","storage","rememberMe","setItem","register","getMyBooks","validateToken","body","forgotPassword","email","deleteUser","delete","error","errorMessage","ErrorEvent","console","message","status","clearToken","Error","removeItem","set","_","i0","ɵɵinject","i1","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\laura\\Desktop\\ProjectAngular.Net\\MyLibrary\\UI\\library.web\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { LoginRequest } from '../models/login.model';\r\nimport { RegisterRequest } from '../models/register.model';\r\nimport { UserProfile } from '../models/user.model';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private baseUrl = environment.apiUrl;\r\n  private headers = new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  });\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getToken(): string | null {\r\n    return localStorage.getItem('token') || sessionStorage.getItem('token');\r\n  }\r\n\r\n  getUserId(): Observable<{ userId: string }> {\r\n    return this.http.get<{ userId: string }>(`${this.baseUrl}/User/GetUserId`, { headers: this.getAuthHeaders() }); // Ensure headers are used\r\n  }\r\n\r\n  getUserDetails(): Observable<UserProfile> {\r\n    return this.http.get<UserProfile>(`${this.baseUrl}/User/details`, { headers: this.getAuthHeaders() }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // User login\r\n  onLogin(request: LoginRequest): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/Account/login`, request, { headers: this.headers }).pipe(\r\n      tap(response => {\r\n        if (response.token) {\r\n          const storage = request.rememberMe ? localStorage : sessionStorage;\r\n          storage.setItem('token', response.token); // Store token based on rememberMe\r\n        }\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // User registration\r\n  register(request: RegisterRequest): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/Account/register`, request, { headers: this.headers }).pipe(\r\n      tap(response => {\r\n        if (response.token) {\r\n          localStorage.setItem('token', response.token); // Store token\r\n        }\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Fetching user's books\r\n  getMyBooks(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/Account/MyBooks`, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Validating token\r\n  validateToken(token: string): Observable<{ valid: boolean }> {\r\n    const body = { token };\r\n    return this.http.post<{ valid: boolean }>(`${this.baseUrl}/Account/validate-token`, body, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Password reset\r\n  forgotPassword(email: string): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/ResetPassword/forgot-password`, { email }, { headers: this.headers })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Deleting user account\r\n  deleteUser(): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/User/delete`, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Error handling\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'Something went wrong; please try again later.';\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.error('A client-side error occurred:', error.error.message);\r\n    } else {\r\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\r\n      switch (error.status) {\r\n        case 400:\r\n          errorMessage = 'Bad Request: Please check your input.';\r\n          break;\r\n        case 401:\r\n          errorMessage = 'Unauthorized: Invalid credentials or session expired.';\r\n          this.clearToken(); // Clear token on 401\r\n          break;\r\n        case 500:\r\n          errorMessage = 'Server error: Please try again later.';\r\n          break;\r\n        default:\r\n          errorMessage = `Unexpected error: ${error.message}`;\r\n          break;\r\n      }\r\n    }\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  // Clear token\r\n  private clearToken(): void {\r\n    localStorage.removeItem('token');\r\n    sessionStorage.removeItem('token');\r\n    // Optionally redirect to login page\r\n  }\r\n\r\n  // Get authorization headers\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.getToken();\r\n    return this.headers.set('Authorization', token ? `Bearer ${token}` : '');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}