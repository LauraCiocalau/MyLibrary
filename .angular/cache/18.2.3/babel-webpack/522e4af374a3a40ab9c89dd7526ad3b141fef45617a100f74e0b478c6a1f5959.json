{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    intercept(req, next) {\n      // Retrieve the token from localStorage or another storage mechanism\n      const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n      // Clone the request to add the Authorization header if the token is available\n      const authReq = token ? req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      }) : req;\n      // Pass the cloned request instead of the original request to the next handler.\n      return next.handle(authReq);\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthInterceptor)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":{"version":3,"names":["HttpRequest","HttpHandler","HttpEvent","AuthInterceptor","intercept","req","next","token","localStorage","getItem","sessionStorage","authReq","clone","setHeaders","Authorization","handle","_","_2","factory","ɵfac"],"sources":["C:\\Users\\laura\\Desktop\\ProjectAngular.Net\\MyLibrary\\UI\\library.web\\src\\app\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Retrieve the token from localStorage or another storage mechanism\r\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n\r\n    // Clone the request to add the Authorization header if the token is available\r\n    const authReq = token ? req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    }) : req;\r\n\r\n    // Pass the cloned request instead of the original request to the next handler.\r\n    return next.handle(authReq);\r\n  }\r\n}"],"mappings":"AACA,SAA0BA,WAAW,EAAEC,WAAW,EAAEC,SAAS,QAAQ,sBAAsB;;AAI3F,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAE1BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;MAChD;MACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,OAAO,CAAC;MAE9E;MACA,MAAME,OAAO,GAAGJ,KAAK,GAAGF,GAAG,CAACO,KAAK,CAAC;QAChCC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUP,KAAK;;OAEjC,CAAC,GAAGF,GAAG;MAER;MACA,OAAOC,IAAI,CAACS,MAAM,CAACJ,OAAO,CAAC;IAC7B;IAAC,QAAAK,CAAA,G;uCAfUb,eAAe;IAAA;IAAA,QAAAc,EAAA,G;aAAfd,eAAe;MAAAe,OAAA,EAAff,eAAe,CAAAgB;IAAA;;SAAfhB,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}